@import "syntax-variables";

atom-text-editor {
    background-color: @syntax-background-color;
    color: @text;

    .wrap-guide {
        background-color: @syntax-wrap-guide-color;
    }

    .indent-guide {
        color: @syntax-indent-guide-color;
    }

    .invisible-character {
        color: @syntax-invisible-character-color;
    }

    .gutter {
        background-color: @syntax-gutter-background-color;
        color: @syntax-gutter-text-color;

        .line-number {
            &.cursor-line {
                background-color: @syntax-gutter-background-color-selected;
                color: @syntax-gutter-text-color-selected;
            }

            &.cursor-line-no-selection {
                color: @syntax-gutter-text-color-selected;
            }
        }
    }

    .fold-marker:after,
    .gutter .line-number.folded,
    .gutter .line-number:after {
        color: @light-gray;
    }

    .invisible {
        color: @syntax-text-color;
    }

    .cursor {
        color: @syntax-cursor-color;
    }

    .selection .region {
        background-color: @syntax-selection-color;
    }

    .syntax--source.syntax--js.syntax--jsx .syntax--jsx .syntax--entity.syntax--other.syntax--attribute-name {
        font-style: normal;
    }

    .syntax--keyword.syntax--assignment {
        color: @js-assignment;
    }
}

.atom-ternjs-type {
    display: none;
}

.syntax--source.syntax--gfm .syntax--markup {
    -webkit-font-smoothing: auto;

    &.syntax--heading {
        color: @green;
    }
}
// Syntax styles

.syntax--comment {
    color: @js-comment;
}

.syntax--js,
.syntax--ts {
    &.syntax--brace.syntax--curly {
        color: @js-curly-brace;
    }
    // this
    &.syntax--language.syntax--variable {
        color: @js-this;

        &.syntax--arguments {
            color: @text;
        }

        &.syntax--proto {
            color: @js-object-property;
        }
    }

    &.syntax--string {
        color: @js-string;

        &.syntax--template {
            color: @js-string;

            .syntax--definition {
                color: @js-string;
            }
        }
    }

    &.syntax--variable.syntax--default {
        color: @js-keyword;
    }

    &.syntax--keyword {
        color: @js-keyword;
    }

    &.syntax--operator {
        color: @js-operator;
    }

    &.syntax--operator.syntax--accessor {
        color: @js-dot;
    }

    &.syntax--module {
        .syntax--operator.syntax--accessor {
            color: @js-definition;
        }
    }

    &.syntax--keyword.syntax--operator.syntax--new {
        color: @js-keyword;
    }

    &.syntax--punctuation.syntax--curly.syntax--bracket {
        color: @js-curly-brace;
    }

    &.syntax--comma {
        color: @js-comma;
    }

    &.syntax--storage {
        color: @js-definition;
    }

    &.syntax--keyword.syntax--operator.syntax--of {
        color: @js-keyword;
    }

    &.syntax--meta.syntax--function {
        > .syntax--function.syntax--type {
            color: @js-function-definition;
        }

        > .syntax--function.syntax--type.syntax--arrow {
            color: @js-function-arrow;
        }

        > .syntax--function.syntax--name {
            color: @js-function-definition-name;
        }

        &.syntax--parameters {
            .syntax--variable.syntax--other.syntax--readwrite {
                color: @js-function-argument;
            }
        }

        .syntax--parameters.syntax--punctuation {
            .syntax--brace.syntax--round {
                color: @js-function-definition-brace;
            }
        }
    }

    .syntax--arrow {
        .syntax--punctuation.syntax--block {
            color: @js-function-definition-curly;
        }

        > .syntax--curly {
            // color: @js-function-definition-curly;
        }
    }

    &.syntax--meta.syntax--function.syntax--json {
        > .syntax--function.syntax--name {
            color: @js-function-name-object-key;
        }
    }

    &.syntax--meta.syntax--function-call {
        > .syntax--round {
            color: @js-function-invocation-brace;
        }

        > .syntax--function.syntax--name {
            color: @js-function-invocation;
        }
    }

    &.syntax--console.syntax--function {
        color: @js-function-invocation;
    }

    &.syntax--meta.syntax--method-call {
        > .syntax--round {
            color: @js-function-invocation-brace;
        }

        > .syntax--function.syntax--name {
            color: @js-function-invocation;
        }
    }

    &.syntax--variable.syntax--parameter {
        color: @js-parameter;
    }

    &.syntax--function.syntax--mutator {
        color: @js-function-invocation;
    }

    &.syntax--boolean {
        color: @js-boolean;
    }

    &.syntax--null {
        color: @js-null;
    }

    &.syntax--undefined {
        color: @js-undefined;
    }

    &.syntax--keyword.syntax--operator.syntax--typeof {
        color: @js-keyword;
    }

    &.syntax--keyword.syntax--operator.syntax--in {
        color: @js-keyword;
    }

    &.syntax--keyword.syntax--operator.syntax--comparison {
        color: @js-operator-comparison;
    }

    &.syntax--keyword.syntax--operator.syntax--logical {
        color: @js-logical-operator;
    }

    &.syntax--litobj,
    &.syntax--objectliteral {
        .syntax--punctuation.syntax--block {
            color: @js-object-brace;
        }

    }

    &.syntax--object.syntax--key {
        .syntax--string {
            color: @js-object-key;
        }
    }

    &.syntax--object-literal {
        .syntax--punctuation.syntax--block {
            color: @js-object-key;
        }
    }

    &.syntax--object-literal.syntax--key {
        color: @js-object-key;
    }

    &.syntax--brace.syntax--square {
        color: @js-square-brace;
    }

    &.syntax--brace.syntax--round {
        color: @js-round-brace;
    }

    &.syntax--variable.syntax--object {
        color: @js-object;
    }

    &.syntax--variable {
        color: @variable;

        &.syntax--other.syntax--readwrite {
            color: @js-variable;
        }

        &.syntax--other.syntax--object {
            color: @js-variable;
        }

        &.syntax--language.syntax--prototype {
            color: @js-object-property;
        }

        &.syntax--language.syntax--constructor {
            color: @js-object-property;
        }
    }

    &.syntax--variable.syntax--property {
        color: @js-object-property;
    }

    &.syntax--variable.syntax--other.syntax--readwrite.syntax--shorthandpropertyname {
        color: @js-shorthand-object-property;
    }

    &.syntax--quasi {
        color: @js-quasi;

        &.syntax--begin {
            color: @js-quasi-edge;
        }

        &.syntax--end {
            color: @js-quasi-edge;
        }
    }
    // &.syntax--module {
    //     color: @js-special;
    // }
    &.syntax--parameters {
        .syntax--type {
            color: @js-type;
        }

        .syntax--punctuation {
            color: @js-type;
        }

        .syntax--type.syntax--operator {
            color: @text;
        }

        &.syntax--begin,
        &.syntax--end {
            color: @js-parameters-braces;
        }
    }

    &.syntax--return.syntax--type {
        color: @js-type;
    }

    &.syntax--decorator {
        color: @js-decorator;
    }

    &.syntax--litobj.syntax--curly {
        color: @js-object-brace;
    }

    &.syntax--constant {
        &.syntax--numeric {
            color: @js-number;
        }
    }

    .syntax--terminator {
        color: @js-semicolon;
    }
}

&.syntax--jsx {
    .syntax--tag {
        &.syntax--name {
            color: @jsx-tag-name;
        }

        &.syntax--definition.syntax--punctuation {
            color: @jsx-tag-bracket;
        }

        .syntax--attribute-name {
            color: @jsx-attribute-name;
        }
    }

    .syntax--section.syntax--embedded.syntax--punctuation {
        color: @jsx-embedded-section;
    }
}

.syntax--flowtype {
    &.syntax--keyword {
        color: @flow-keyword;
    }

    &.syntax--punctuation {
        color: @flow-semicolon;
    }

    .syntax--support {
        color: @flow-type;
    }
}

.syntax--css {
    &.syntax--attribute-name {
        color: @css-selector;
    }

    &.syntax--property-name {
        color: @css-property;
    }

    &.syntax--property-value {
        color: @text;
    }

    &.syntax--tag.syntax--name {
        color: @css-tag-name;
    }

    &.syntax--unit.syntax--keyword {
        color: @css-unit;
    }
}

.syntax--scss {
    &.syntax--keyword {
        color: @scss-keyword;
    }

    &.syntax--reference {
        color: @css-selector;
    }

    &.syntax--meta.syntax--property-list {
        > .syntax--variable {
            color: @css-selector;
        }
    }

    &.syntax--variable {
        color: @scss-variable;
    }
}

.syntax--json {
    &.syntax--key.syntax--meta .syntax--string {
        color: @json-key;
    }

    &.syntax--string {
        color: @json-value;
    }
}

.syntax--makefile {
    .syntax--function.syntax--name {
        color: @makefile-target;
    }

    .syntax--variable {
        color: @makefile-variable;
    }
}

.outline-view {
    .syntax--keyword {
        color: @blue;
    }

    .outline-view-item {
        > .syntax--function ~ span {
            display: none;
        }
    }
}
// Mini editor

atom-text-editor[mini] .scroll-view {
    padding-left: 1px;
}

atom-overlay {
    background-color: #333;
}

.syntax--html {
    .syntax--tag {
        .syntax--name {
            color: @html-tag;
        }

        .syntax--doctype {
            color: @html-tag;
        }

        .syntax--tag.syntax--punctuation {
            color: @html-tag;
        }

        .syntax--attribute-name {
            color: @html-attribute-name;
        }

        .syntax--attribute-with-value {
            color: @html-attribute-value;
        }
    }
}
